const router = require('express').Router();
const bcrypt = require('bcryptjs');
const auth = require('../middlewares/auth');
const User = require('../models/UserModel');
const Role = require('../models/RoleModel');
const { PERMISSIONS, BLOOD_TYPES } = require('../constants');

router.post('/generate_admin', async (req, res) => {
   try {
       let roleID;
       try {
           const newRole = new Role({
               name: 'AdminRole',
               description: 'This role is autogenerated.',
               permissions: Object.values(PERMISSIONS)
                   .filter((permission) => permission.includes('admin:')),
           });
           const { _id } = await newRole.save();
           roleID = _id;
       } catch (e){
           const { _id } = await Role.findOne({ name: 'AdminRole' });
           roleID = _id;
       }

       const newUser = new User({
           name: 'Admin',
           surname: 'Admin',
           username: 'admin',
           password: '00000000',
           email: 'karsicrijad@gmail.com',
           roleID,
       });

       const salt = await bcrypt.genSalt(10);
       const hash = await bcrypt.hash(newUser.password, salt);

       newUser.password = hash;
       const savedUser = await newUser.save();
       savedUser.password = null;
       res.json({ savedUser });
   } catch (e) {
       res.status(400).json({message: e?.message || 'Something went wrong'});
   }
});

router.get('/', auth( PERMISSIONS.ADMIN_READ_USERS ), async ( { user } , res) => {
    try {
        const users = await User.find();
        res.json(users.filter(({ _id }) => _id.toString() !== user?.id));
    } catch(e){
        res.status(400).json({message: e?.message || 'Something went wrong'});
    }
});

router.get('/details/:id', auth( PERMISSIONS.ADMIN_READ_USERS ), async ({ params }, res) => {
   try {
       const user = await User.findById(params?.id);
       res.json(user);
   } catch (e) {
       res.status(400).json({message: e?.message || 'Something went wrong'});
   }
});

router.get('/my-profile', auth(PERMISSIONS.USER_EDIT_PROFILE), async({user}, res) => {
    try{
        const details = await User.findById(user?.id);
        details.password = null;
        res.json(details);
    } catch (e){
        res.status(400).json({message: e?.message || 'Something went wrong'});
    }
});

router.post('/my-profile', auth(PERMISSIONS.USER_EDIT_PROFILE), async({user, body}, res) => {
    try{
        if(body?.username === 'admin')
            return res.status(400).json({message: 'Username already exists'});

        const details = await User.findOneAndUpdate({_id: user?.id}, {
            name: body?.name,
            surname: body?.surname,
            username: body?.username,
            email: body?.email,
        },
            { new: true }
            );
        details.password = null;
        res.json(details);
    } catch (e){
        if(e?.message?.includes('email_1 dup key'))
            return res.status(400).json({message: 'Email already exists'});
        if(e?.message?.includes('username_1 dup key'))
            return res.status(400).json({message: 'Username already exists'});
        res.status(400).json({message: e?.message || 'Something went wrong'});
    }
});

router.post('/create', auth( PERMISSIONS.ADMIN_CREATE_USER ), async ( { body }, res ) => {
    try {
        if(body?.bloodType && !Object.values(BLOOD_TYPES).includes(body?.bloodType))
            return res.status(400).json({ message: 'Unknown blood type' });

        if(body?.password.length < 8)
            return res.status(400).json({message: 'Password minimum length is 8'});

        const newUser = new User({...body});

        const salt = await bcrypt.genSalt(10);
        const hash = await bcrypt.hash(newUser.password, salt);

        newUser.password = hash;
        const savedUser = await newUser.save();
        savedUser.password = null;
        res.json({ savedUser });
    } catch (e) {
        res.status(400).json({message: e?.message || 'Something went wrong'});
    }
});

router.post('/update/:id', auth( PERMISSIONS.ADMIN_UPDATE_USER ), async ({ body, params }, res) => {
   try {
       await User.findOneAndUpdate({_id: params?.id}, {...body});
       res.json();
   } catch (e) {
       res.status(400).json({message: e?.message || 'Something went wrong'});
   }
});

router.delete('/:id', auth( PERMISSIONS.ADMIN_DELETE_USER ), async ( { params }, res ) => {
    try{
        await User.findOneAndDelete({_id: params?.id});
        res.json();
    }catch (e){
        res.status(400).json({message: e.message || 'Something went wrong'});
    }
});

module.exports = router;